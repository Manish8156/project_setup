name: project_setup
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.5.3

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter


  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

  # https://pub.dev/packages/intl
  # Provides internationalization and localization facilities
  intl: ^0.19.0

  # https://pub.dev/packages/get_it
  # This is a simple Service Locator for Dart and Flutter projects.
  get_it: ^8.0.0

  # https://pub.dev/packages/dio
  # A powerful Http client for Dart, which supports Interceptors, Global configuration, FormData, Request Cancellation, File downloading, Timeout etc.
  dio: ^5.7.0

  # https://pub.dev/packages/device_info_plus
  # Get current device information from within the Flutter application.
  device_info_plus: ^10.1.2

  # https://pub.dev/packages/retry
  # This package provides an easy way to retry asynchronous functions.
  retry: ^3.1.2

  # https://pub.dev/packages/pretty_dio_logger
  # Pretty Dio logger is a Dio interceptor that logs network calls in a pretty, easy to read format.
  pretty_dio_logger: ^1.4.0

  # https://pub.dev/packages/connectivity_plus
  # This plugin allows Flutter apps to discover network connectivity and configure themselves accordingly. It can distinguish between cellular vs WiFi connection.
  connectivity_plus: ^6.0.5

  # https://pub.dev/packages/json_annotation
  # Defines the annotations used by json_serializable to create code for JSON serialization and deserialization.
  json_annotation: ^4.9.0

  # https://pub.dev/packages/json_serializable
  # Provides Dart Build System builders for handling JSON.
  json_serializable: ^6.8.0

  # https://pub.dev/packages/retrofit
  # retrofit.dart is a type conversion dio client generator using source_gen and inspired by Chopper and Retrofit.
  retrofit: ^4.4.1

  # https://pub.dev/packages/hive
  # Hive is a lightweight and blazing fast key-value database written in pure Dart.
  hive: ^2.2.3

  # https://pub.dev/packages/crypto
  # A set of cryptographic hashing functions for Dart.
  crypto: ^3.0.6

  serverpod_client: ^2.1.4
  serverpod_flutter: any
  serverpod: ^2.1.4

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^4.0.0

  # https://pub.dev/packages/bui`ld_runner
  # The build_runner package provides a concrete way of generating files using Dart code
  build_runner: ^2.4.13

  # https://pub.dev/packages/retrofit_generator
  # retrofit.dart is a type conversion dio client generator using source_gen and inspired by Chopper and Retrofit.
  retrofit_generator: ^9.1.2

  # https://pub.dev/packages/hive_generator
  # Extension for hive.
  hive_generator: ^2.0.1

  # https://pub.dev/packages/firebase_messaging
  # A Flutter plugin to use the Firebase Cloud Messaging API.
  firebase_messaging: ^15.1.3

  # https://pub.dev/packages/flutter_local_notifications
  # A cross platform plugin for displaying local notifications.
  flutter_local_notifications: ^17.2.3

  # https://pub.dev/packages/firebase_core
  # A Flutter plugin to use the Firebase Core API, which enables connecting to multiple Firebase apps.
  firebase_core: ^3.6.0

  # https://pub.dev/packages/socket_io_client
  # Port of awesome JavaScript Node.js library - Socket.io-client v2.0.1~v3.0.3 - in Dart
  socket_io_client: ^3.0.0

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  generate: true

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
    - assets/svg/

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
